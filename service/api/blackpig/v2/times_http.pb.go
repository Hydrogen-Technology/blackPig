// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.3
// - protoc             v5.29.2
// source: blackpig/v2/times.proto

package v2

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationTimeServiceCreateTime = "/blackpig.v2.TimeService/CreateTime"
const OperationTimeServiceDeleteTime = "/blackpig.v2.TimeService/DeleteTime"
const OperationTimeServiceListTimes = "/blackpig.v2.TimeService/ListTimes"
const OperationTimeServiceUpdateTime = "/blackpig.v2.TimeService/UpdateTime"

type TimeServiceHTTPServer interface {
	// CreateTime 创建时间表的时间项
	CreateTime(context.Context, *TimeRequest) (*Times, error)
	// DeleteTime 删除时间表的时间项
	DeleteTime(context.Context, *DeleteTimeRequest) (*DeleteTimeResponse, error)
	// ListTimes 获取时间表的时间项列表
	ListTimes(context.Context, *TimeListRequest) (*TimeList, error)
	// UpdateTime 更新时间表的时间项
	UpdateTime(context.Context, *Times) (*Times, error)
}

func RegisterTimeServiceHTTPServer(s *http.Server, srv TimeServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/v2/times/add", _TimeService_CreateTime0_HTTP_Handler(srv))
	r.GET("/v2/times/list{id}", _TimeService_ListTimes0_HTTP_Handler(srv))
	r.PATCH("/v2/times/update", _TimeService_UpdateTime0_HTTP_Handler(srv))
	r.DELETE("/v2/times/{id}", _TimeService_DeleteTime0_HTTP_Handler(srv))
}

func _TimeService_CreateTime0_HTTP_Handler(srv TimeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TimeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTimeServiceCreateTime)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateTime(ctx, req.(*TimeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Times)
		return ctx.Result(200, reply)
	}
}

func _TimeService_ListTimes0_HTTP_Handler(srv TimeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TimeListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTimeServiceListTimes)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListTimes(ctx, req.(*TimeListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TimeList)
		return ctx.Result(200, reply)
	}
}

func _TimeService_UpdateTime0_HTTP_Handler(srv TimeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Times
		if err := ctx.Bind(&in.Time); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTimeServiceUpdateTime)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateTime(ctx, req.(*Times))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Times)
		return ctx.Result(200, reply)
	}
}

func _TimeService_DeleteTime0_HTTP_Handler(srv TimeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteTimeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTimeServiceDeleteTime)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteTime(ctx, req.(*DeleteTimeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteTimeResponse)
		return ctx.Result(200, reply)
	}
}

type TimeServiceHTTPClient interface {
	CreateTime(ctx context.Context, req *TimeRequest, opts ...http.CallOption) (rsp *Times, err error)
	DeleteTime(ctx context.Context, req *DeleteTimeRequest, opts ...http.CallOption) (rsp *DeleteTimeResponse, err error)
	ListTimes(ctx context.Context, req *TimeListRequest, opts ...http.CallOption) (rsp *TimeList, err error)
	UpdateTime(ctx context.Context, req *Times, opts ...http.CallOption) (rsp *Times, err error)
}

type TimeServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewTimeServiceHTTPClient(client *http.Client) TimeServiceHTTPClient {
	return &TimeServiceHTTPClientImpl{client}
}

func (c *TimeServiceHTTPClientImpl) CreateTime(ctx context.Context, in *TimeRequest, opts ...http.CallOption) (*Times, error) {
	var out Times
	pattern := "/v2/times/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTimeServiceCreateTime))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *TimeServiceHTTPClientImpl) DeleteTime(ctx context.Context, in *DeleteTimeRequest, opts ...http.CallOption) (*DeleteTimeResponse, error) {
	var out DeleteTimeResponse
	pattern := "/v2/times/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTimeServiceDeleteTime))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *TimeServiceHTTPClientImpl) ListTimes(ctx context.Context, in *TimeListRequest, opts ...http.CallOption) (*TimeList, error) {
	var out TimeList
	pattern := "/v2/times/list{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTimeServiceListTimes))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *TimeServiceHTTPClientImpl) UpdateTime(ctx context.Context, in *Times, opts ...http.CallOption) (*Times, error) {
	var out Times
	pattern := "/v2/times/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTimeServiceUpdateTime))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in.Time, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
