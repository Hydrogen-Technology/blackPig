// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.3
// - protoc             v5.29.2
// source: blackpig/v2/reserve.proto

package v2

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationTimeTableServiceAddTimeTables = "/blackpig.v2.TimeTableService/AddTimeTables"
const OperationTimeTableServiceDeleteTimeTable = "/blackpig.v2.TimeTableService/DeleteTimeTable"
const OperationTimeTableServiceGetOrderedByOrderedId = "/blackpig.v2.TimeTableService/GetOrderedByOrderedId"
const OperationTimeTableServiceGetTimeTablesOrdered = "/blackpig.v2.TimeTableService/GetTimeTablesOrdered"
const OperationTimeTableServiceUpdateTimeTable = "/blackpig.v2.TimeTableService/UpdateTimeTable"

type TimeTableServiceHTTPServer interface {
	// AddTimeTables用户预约导员
	AddTimeTables(context.Context, *Ordered) (*Ordered, error)
	// DeleteTimeTable删除预约信息
	DeleteTimeTable(context.Context, *DeleteTimeTableRequest) (*DeleteTimeTableResponse, error)
	// GetOrderedByOrderedId获取导员的预约信息
	GetOrderedByOrderedId(context.Context, *GetOrderedRequest) (*Ordered, error)
	// GetTimeTablesOrdered获取用户的预约信息（当天）
	GetTimeTablesOrdered(context.Context, *GetTimeTablesRequest) (*Ordered, error)
	// UpdateTimeTable修改预约信息
	UpdateTimeTable(context.Context, *TimeTable) (*TimeTable, error)
}

func RegisterTimeTableServiceHTTPServer(s *http.Server, srv TimeTableServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/v2/reserve/add", _TimeTableService_AddTimeTables0_HTTP_Handler(srv))
	r.PATCH("/v2/reserve/update", _TimeTableService_UpdateTimeTable0_HTTP_Handler(srv))
	r.DELETE("/v2/reserve/delete/{id}", _TimeTableService_DeleteTimeTable0_HTTP_Handler(srv))
	r.GET("/v2/reserve/get_ordered/{ordered_id}", _TimeTableService_GetOrderedByOrderedId0_HTTP_Handler(srv))
	r.GET("/v2/reserve/get_time_tables/{user_id}/{day}", _TimeTableService_GetTimeTablesOrdered0_HTTP_Handler(srv))
}

func _TimeTableService_AddTimeTables0_HTTP_Handler(srv TimeTableServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Ordered
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTimeTableServiceAddTimeTables)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddTimeTables(ctx, req.(*Ordered))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Ordered)
		return ctx.Result(200, reply)
	}
}

func _TimeTableService_UpdateTimeTable0_HTTP_Handler(srv TimeTableServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TimeTable
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTimeTableServiceUpdateTimeTable)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateTimeTable(ctx, req.(*TimeTable))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TimeTable)
		return ctx.Result(200, reply)
	}
}

func _TimeTableService_DeleteTimeTable0_HTTP_Handler(srv TimeTableServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteTimeTableRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTimeTableServiceDeleteTimeTable)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteTimeTable(ctx, req.(*DeleteTimeTableRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteTimeTableResponse)
		return ctx.Result(200, reply)
	}
}

func _TimeTableService_GetOrderedByOrderedId0_HTTP_Handler(srv TimeTableServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetOrderedRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTimeTableServiceGetOrderedByOrderedId)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetOrderedByOrderedId(ctx, req.(*GetOrderedRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Ordered)
		return ctx.Result(200, reply)
	}
}

func _TimeTableService_GetTimeTablesOrdered0_HTTP_Handler(srv TimeTableServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTimeTablesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTimeTableServiceGetTimeTablesOrdered)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTimeTablesOrdered(ctx, req.(*GetTimeTablesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Ordered)
		return ctx.Result(200, reply)
	}
}

type TimeTableServiceHTTPClient interface {
	AddTimeTables(ctx context.Context, req *Ordered, opts ...http.CallOption) (rsp *Ordered, err error)
	DeleteTimeTable(ctx context.Context, req *DeleteTimeTableRequest, opts ...http.CallOption) (rsp *DeleteTimeTableResponse, err error)
	GetOrderedByOrderedId(ctx context.Context, req *GetOrderedRequest, opts ...http.CallOption) (rsp *Ordered, err error)
	GetTimeTablesOrdered(ctx context.Context, req *GetTimeTablesRequest, opts ...http.CallOption) (rsp *Ordered, err error)
	UpdateTimeTable(ctx context.Context, req *TimeTable, opts ...http.CallOption) (rsp *TimeTable, err error)
}

type TimeTableServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewTimeTableServiceHTTPClient(client *http.Client) TimeTableServiceHTTPClient {
	return &TimeTableServiceHTTPClientImpl{client}
}

func (c *TimeTableServiceHTTPClientImpl) AddTimeTables(ctx context.Context, in *Ordered, opts ...http.CallOption) (*Ordered, error) {
	var out Ordered
	pattern := "/v2/reserve/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTimeTableServiceAddTimeTables))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *TimeTableServiceHTTPClientImpl) DeleteTimeTable(ctx context.Context, in *DeleteTimeTableRequest, opts ...http.CallOption) (*DeleteTimeTableResponse, error) {
	var out DeleteTimeTableResponse
	pattern := "/v2/reserve/delete/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTimeTableServiceDeleteTimeTable))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *TimeTableServiceHTTPClientImpl) GetOrderedByOrderedId(ctx context.Context, in *GetOrderedRequest, opts ...http.CallOption) (*Ordered, error) {
	var out Ordered
	pattern := "/v2/reserve/get_ordered/{ordered_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTimeTableServiceGetOrderedByOrderedId))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *TimeTableServiceHTTPClientImpl) GetTimeTablesOrdered(ctx context.Context, in *GetTimeTablesRequest, opts ...http.CallOption) (*Ordered, error) {
	var out Ordered
	pattern := "/v2/reserve/get_time_tables/{user_id}/{day}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTimeTableServiceGetTimeTablesOrdered))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *TimeTableServiceHTTPClientImpl) UpdateTimeTable(ctx context.Context, in *TimeTable, opts ...http.CallOption) (*TimeTable, error) {
	var out TimeTable
	pattern := "/v2/reserve/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTimeTableServiceUpdateTimeTable))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
