// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: blackpig/v2/reserve.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TimeTableService_AddTimeTables_FullMethodName         = "/blackpig.v2.TimeTableService/AddTimeTables"
	TimeTableService_UpdateTimeTable_FullMethodName       = "/blackpig.v2.TimeTableService/UpdateTimeTable"
	TimeTableService_DeleteTimeTable_FullMethodName       = "/blackpig.v2.TimeTableService/DeleteTimeTable"
	TimeTableService_GetOrderedByOrderedId_FullMethodName = "/blackpig.v2.TimeTableService/GetOrderedByOrderedId"
	TimeTableService_GetTimeTablesOrdered_FullMethodName  = "/blackpig.v2.TimeTableService/GetTimeTablesOrdered"
)

// TimeTableServiceClient is the client API for TimeTableService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TimeTableServiceClient interface {
	AddTimeTables(ctx context.Context, in *Ordered, opts ...grpc.CallOption) (*Ordered, error)
	UpdateTimeTable(ctx context.Context, in *TimeTable, opts ...grpc.CallOption) (*TimeTable, error)
	DeleteTimeTable(ctx context.Context, in *DeleteTimeTableRequest, opts ...grpc.CallOption) (*DeleteTimeTableResponse, error)
	GetOrderedByOrderedId(ctx context.Context, in *GetOrderedRequest, opts ...grpc.CallOption) (*Ordered, error)
	GetTimeTablesOrdered(ctx context.Context, in *GetTimeTablesRequest, opts ...grpc.CallOption) (*Ordered, error)
}

type timeTableServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTimeTableServiceClient(cc grpc.ClientConnInterface) TimeTableServiceClient {
	return &timeTableServiceClient{cc}
}

func (c *timeTableServiceClient) AddTimeTables(ctx context.Context, in *Ordered, opts ...grpc.CallOption) (*Ordered, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ordered)
	err := c.cc.Invoke(ctx, TimeTableService_AddTimeTables_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeTableServiceClient) UpdateTimeTable(ctx context.Context, in *TimeTable, opts ...grpc.CallOption) (*TimeTable, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TimeTable)
	err := c.cc.Invoke(ctx, TimeTableService_UpdateTimeTable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeTableServiceClient) DeleteTimeTable(ctx context.Context, in *DeleteTimeTableRequest, opts ...grpc.CallOption) (*DeleteTimeTableResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTimeTableResponse)
	err := c.cc.Invoke(ctx, TimeTableService_DeleteTimeTable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeTableServiceClient) GetOrderedByOrderedId(ctx context.Context, in *GetOrderedRequest, opts ...grpc.CallOption) (*Ordered, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ordered)
	err := c.cc.Invoke(ctx, TimeTableService_GetOrderedByOrderedId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeTableServiceClient) GetTimeTablesOrdered(ctx context.Context, in *GetTimeTablesRequest, opts ...grpc.CallOption) (*Ordered, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ordered)
	err := c.cc.Invoke(ctx, TimeTableService_GetTimeTablesOrdered_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TimeTableServiceServer is the server API for TimeTableService service.
// All implementations must embed UnimplementedTimeTableServiceServer
// for forward compatibility.
type TimeTableServiceServer interface {
	AddTimeTables(context.Context, *Ordered) (*Ordered, error)
	UpdateTimeTable(context.Context, *TimeTable) (*TimeTable, error)
	DeleteTimeTable(context.Context, *DeleteTimeTableRequest) (*DeleteTimeTableResponse, error)
	GetOrderedByOrderedId(context.Context, *GetOrderedRequest) (*Ordered, error)
	GetTimeTablesOrdered(context.Context, *GetTimeTablesRequest) (*Ordered, error)
	mustEmbedUnimplementedTimeTableServiceServer()
}

// UnimplementedTimeTableServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTimeTableServiceServer struct{}

func (UnimplementedTimeTableServiceServer) AddTimeTables(context.Context, *Ordered) (*Ordered, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTimeTables not implemented")
}
func (UnimplementedTimeTableServiceServer) UpdateTimeTable(context.Context, *TimeTable) (*TimeTable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTimeTable not implemented")
}
func (UnimplementedTimeTableServiceServer) DeleteTimeTable(context.Context, *DeleteTimeTableRequest) (*DeleteTimeTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTimeTable not implemented")
}
func (UnimplementedTimeTableServiceServer) GetOrderedByOrderedId(context.Context, *GetOrderedRequest) (*Ordered, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderedByOrderedId not implemented")
}
func (UnimplementedTimeTableServiceServer) GetTimeTablesOrdered(context.Context, *GetTimeTablesRequest) (*Ordered, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimeTablesOrdered not implemented")
}
func (UnimplementedTimeTableServiceServer) mustEmbedUnimplementedTimeTableServiceServer() {}
func (UnimplementedTimeTableServiceServer) testEmbeddedByValue()                          {}

// UnsafeTimeTableServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TimeTableServiceServer will
// result in compilation errors.
type UnsafeTimeTableServiceServer interface {
	mustEmbedUnimplementedTimeTableServiceServer()
}

func RegisterTimeTableServiceServer(s grpc.ServiceRegistrar, srv TimeTableServiceServer) {
	// If the following call pancis, it indicates UnimplementedTimeTableServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TimeTableService_ServiceDesc, srv)
}

func _TimeTableService_AddTimeTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ordered)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeTableServiceServer).AddTimeTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TimeTableService_AddTimeTables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeTableServiceServer).AddTimeTables(ctx, req.(*Ordered))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeTableService_UpdateTimeTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeTable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeTableServiceServer).UpdateTimeTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TimeTableService_UpdateTimeTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeTableServiceServer).UpdateTimeTable(ctx, req.(*TimeTable))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeTableService_DeleteTimeTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTimeTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeTableServiceServer).DeleteTimeTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TimeTableService_DeleteTimeTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeTableServiceServer).DeleteTimeTable(ctx, req.(*DeleteTimeTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeTableService_GetOrderedByOrderedId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeTableServiceServer).GetOrderedByOrderedId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TimeTableService_GetOrderedByOrderedId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeTableServiceServer).GetOrderedByOrderedId(ctx, req.(*GetOrderedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeTableService_GetTimeTablesOrdered_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTimeTablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeTableServiceServer).GetTimeTablesOrdered(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TimeTableService_GetTimeTablesOrdered_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeTableServiceServer).GetTimeTablesOrdered(ctx, req.(*GetTimeTablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TimeTableService_ServiceDesc is the grpc.ServiceDesc for TimeTableService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TimeTableService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blackpig.v2.TimeTableService",
	HandlerType: (*TimeTableServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTimeTables",
			Handler:    _TimeTableService_AddTimeTables_Handler,
		},
		{
			MethodName: "UpdateTimeTable",
			Handler:    _TimeTableService_UpdateTimeTable_Handler,
		},
		{
			MethodName: "DeleteTimeTable",
			Handler:    _TimeTableService_DeleteTimeTable_Handler,
		},
		{
			MethodName: "GetOrderedByOrderedId",
			Handler:    _TimeTableService_GetOrderedByOrderedId_Handler,
		},
		{
			MethodName: "GetTimeTablesOrdered",
			Handler:    _TimeTableService_GetTimeTablesOrdered_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blackpig/v2/reserve.proto",
}
