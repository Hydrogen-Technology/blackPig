// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: blackpig/v2/times.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TimeService_CreateTime_FullMethodName = "/blackpig.v2.TimeService/CreateTime"
	TimeService_ListTimes_FullMethodName  = "/blackpig.v2.TimeService/ListTimes"
	TimeService_UpdateTime_FullMethodName = "/blackpig.v2.TimeService/UpdateTime"
	TimeService_DeleteTime_FullMethodName = "/blackpig.v2.TimeService/DeleteTime"
)

// TimeServiceClient is the client API for TimeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TimeServiceClient interface {
	CreateTime(ctx context.Context, in *TimeRequest, opts ...grpc.CallOption) (*Times, error)
	ListTimes(ctx context.Context, in *TimeListRequest, opts ...grpc.CallOption) (*TimeList, error)
	UpdateTime(ctx context.Context, in *Times, opts ...grpc.CallOption) (*Times, error)
	DeleteTime(ctx context.Context, in *DeleteTimeRequest, opts ...grpc.CallOption) (*DeleteTimeResponse, error)
}

type timeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTimeServiceClient(cc grpc.ClientConnInterface) TimeServiceClient {
	return &timeServiceClient{cc}
}

func (c *timeServiceClient) CreateTime(ctx context.Context, in *TimeRequest, opts ...grpc.CallOption) (*Times, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Times)
	err := c.cc.Invoke(ctx, TimeService_CreateTime_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeServiceClient) ListTimes(ctx context.Context, in *TimeListRequest, opts ...grpc.CallOption) (*TimeList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TimeList)
	err := c.cc.Invoke(ctx, TimeService_ListTimes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeServiceClient) UpdateTime(ctx context.Context, in *Times, opts ...grpc.CallOption) (*Times, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Times)
	err := c.cc.Invoke(ctx, TimeService_UpdateTime_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeServiceClient) DeleteTime(ctx context.Context, in *DeleteTimeRequest, opts ...grpc.CallOption) (*DeleteTimeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTimeResponse)
	err := c.cc.Invoke(ctx, TimeService_DeleteTime_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TimeServiceServer is the server API for TimeService service.
// All implementations must embed UnimplementedTimeServiceServer
// for forward compatibility.
type TimeServiceServer interface {
	CreateTime(context.Context, *TimeRequest) (*Times, error)
	ListTimes(context.Context, *TimeListRequest) (*TimeList, error)
	UpdateTime(context.Context, *Times) (*Times, error)
	DeleteTime(context.Context, *DeleteTimeRequest) (*DeleteTimeResponse, error)
	mustEmbedUnimplementedTimeServiceServer()
}

// UnimplementedTimeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTimeServiceServer struct{}

func (UnimplementedTimeServiceServer) CreateTime(context.Context, *TimeRequest) (*Times, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTime not implemented")
}
func (UnimplementedTimeServiceServer) ListTimes(context.Context, *TimeListRequest) (*TimeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTimes not implemented")
}
func (UnimplementedTimeServiceServer) UpdateTime(context.Context, *Times) (*Times, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTime not implemented")
}
func (UnimplementedTimeServiceServer) DeleteTime(context.Context, *DeleteTimeRequest) (*DeleteTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTime not implemented")
}
func (UnimplementedTimeServiceServer) mustEmbedUnimplementedTimeServiceServer() {}
func (UnimplementedTimeServiceServer) testEmbeddedByValue()                     {}

// UnsafeTimeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TimeServiceServer will
// result in compilation errors.
type UnsafeTimeServiceServer interface {
	mustEmbedUnimplementedTimeServiceServer()
}

func RegisterTimeServiceServer(s grpc.ServiceRegistrar, srv TimeServiceServer) {
	// If the following call pancis, it indicates UnimplementedTimeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TimeService_ServiceDesc, srv)
}

func _TimeService_CreateTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeServiceServer).CreateTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TimeService_CreateTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeServiceServer).CreateTime(ctx, req.(*TimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeService_ListTimes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeServiceServer).ListTimes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TimeService_ListTimes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeServiceServer).ListTimes(ctx, req.(*TimeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeService_UpdateTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Times)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeServiceServer).UpdateTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TimeService_UpdateTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeServiceServer).UpdateTime(ctx, req.(*Times))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeService_DeleteTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeServiceServer).DeleteTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TimeService_DeleteTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeServiceServer).DeleteTime(ctx, req.(*DeleteTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TimeService_ServiceDesc is the grpc.ServiceDesc for TimeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TimeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blackpig.v2.TimeService",
	HandlerType: (*TimeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTime",
			Handler:    _TimeService_CreateTime_Handler,
		},
		{
			MethodName: "ListTimes",
			Handler:    _TimeService_ListTimes_Handler,
		},
		{
			MethodName: "UpdateTime",
			Handler:    _TimeService_UpdateTime_Handler,
		},
		{
			MethodName: "DeleteTime",
			Handler:    _TimeService_DeleteTime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blackpig/v2/times.proto",
}
