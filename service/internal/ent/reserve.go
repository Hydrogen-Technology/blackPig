// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"service/internal/ent/reserve"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Reserve is the model entity for the Reserve schema.
type Reserve struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int32 `json:"user_id,omitempty"`
	// StartTime holds the value of the "start_time" field.
	StartTime string `json:"start_time,omitempty"`
	// OrderedID holds the value of the "ordered_id" field.
	OrderedID string `json:"ordered_id,omitempty"`
	// Day holds the value of the "day" field.
	Day string `json:"day,omitempty"`
	// Detail holds the value of the "detail" field.
	Detail       string `json:"detail,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Reserve) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case reserve.FieldID, reserve.FieldUserID:
			values[i] = new(sql.NullInt64)
		case reserve.FieldStartTime, reserve.FieldOrderedID, reserve.FieldDay, reserve.FieldDetail:
			values[i] = new(sql.NullString)
		case reserve.FieldCreatedAt, reserve.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Reserve fields.
func (r *Reserve) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case reserve.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int64(value.Int64)
		case reserve.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Time
			}
		case reserve.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				r.UpdatedAt = value.Time
			}
		case reserve.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				r.UserID = int32(value.Int64)
			}
		case reserve.FieldStartTime:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field start_time", values[i])
			} else if value.Valid {
				r.StartTime = value.String
			}
		case reserve.FieldOrderedID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ordered_id", values[i])
			} else if value.Valid {
				r.OrderedID = value.String
			}
		case reserve.FieldDay:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field day", values[i])
			} else if value.Valid {
				r.Day = value.String
			}
		case reserve.FieldDetail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field detail", values[i])
			} else if value.Valid {
				r.Detail = value.String
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Reserve.
// This includes values selected through modifiers, order, etc.
func (r *Reserve) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// Update returns a builder for updating this Reserve.
// Note that you need to call Reserve.Unwrap() before calling this method if this Reserve
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Reserve) Update() *ReserveUpdateOne {
	return NewReserveClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Reserve entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Reserve) Unwrap() *Reserve {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Reserve is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Reserve) String() string {
	var builder strings.Builder
	builder.WriteString("Reserve(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("created_at=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(r.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", r.UserID))
	builder.WriteString(", ")
	builder.WriteString("start_time=")
	builder.WriteString(r.StartTime)
	builder.WriteString(", ")
	builder.WriteString("ordered_id=")
	builder.WriteString(r.OrderedID)
	builder.WriteString(", ")
	builder.WriteString("day=")
	builder.WriteString(r.Day)
	builder.WriteString(", ")
	builder.WriteString("detail=")
	builder.WriteString(r.Detail)
	builder.WriteByte(')')
	return builder.String()
}

// Reserves is a parsable slice of Reserve.
type Reserves []*Reserve
