// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"service/internal/ent/reserve"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ReserveCreate is the builder for creating a Reserve entity.
type ReserveCreate struct {
	config
	mutation *ReserveMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (rc *ReserveCreate) SetCreatedAt(t time.Time) *ReserveCreate {
	rc.mutation.SetCreatedAt(t)
	return rc
}

// SetUpdatedAt sets the "updated_at" field.
func (rc *ReserveCreate) SetUpdatedAt(t time.Time) *ReserveCreate {
	rc.mutation.SetUpdatedAt(t)
	return rc
}

// SetUserID sets the "user_id" field.
func (rc *ReserveCreate) SetUserID(i int32) *ReserveCreate {
	rc.mutation.SetUserID(i)
	return rc
}

// SetStartTime sets the "start_time" field.
func (rc *ReserveCreate) SetStartTime(s string) *ReserveCreate {
	rc.mutation.SetStartTime(s)
	return rc
}

// SetOrderedID sets the "ordered_id" field.
func (rc *ReserveCreate) SetOrderedID(s string) *ReserveCreate {
	rc.mutation.SetOrderedID(s)
	return rc
}

// SetDay sets the "day" field.
func (rc *ReserveCreate) SetDay(s string) *ReserveCreate {
	rc.mutation.SetDay(s)
	return rc
}

// SetDetail sets the "detail" field.
func (rc *ReserveCreate) SetDetail(s string) *ReserveCreate {
	rc.mutation.SetDetail(s)
	return rc
}

// SetID sets the "id" field.
func (rc *ReserveCreate) SetID(i int64) *ReserveCreate {
	rc.mutation.SetID(i)
	return rc
}

// Mutation returns the ReserveMutation object of the builder.
func (rc *ReserveCreate) Mutation() *ReserveMutation {
	return rc.mutation
}

// Save creates the Reserve in the database.
func (rc *ReserveCreate) Save(ctx context.Context) (*Reserve, error) {
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *ReserveCreate) SaveX(ctx context.Context) *Reserve {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *ReserveCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *ReserveCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *ReserveCreate) check() error {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Reserve.created_at"`)}
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Reserve.updated_at"`)}
	}
	if _, ok := rc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Reserve.user_id"`)}
	}
	if _, ok := rc.mutation.StartTime(); !ok {
		return &ValidationError{Name: "start_time", err: errors.New(`ent: missing required field "Reserve.start_time"`)}
	}
	if _, ok := rc.mutation.OrderedID(); !ok {
		return &ValidationError{Name: "ordered_id", err: errors.New(`ent: missing required field "Reserve.ordered_id"`)}
	}
	if _, ok := rc.mutation.Day(); !ok {
		return &ValidationError{Name: "day", err: errors.New(`ent: missing required field "Reserve.day"`)}
	}
	if _, ok := rc.mutation.Detail(); !ok {
		return &ValidationError{Name: "detail", err: errors.New(`ent: missing required field "Reserve.detail"`)}
	}
	return nil
}

func (rc *ReserveCreate) sqlSave(ctx context.Context) (*Reserve, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *ReserveCreate) createSpec() (*Reserve, *sqlgraph.CreateSpec) {
	var (
		_node = &Reserve{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(reserve.Table, sqlgraph.NewFieldSpec(reserve.FieldID, field.TypeInt64))
	)
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.SetField(reserve.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rc.mutation.UpdatedAt(); ok {
		_spec.SetField(reserve.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := rc.mutation.UserID(); ok {
		_spec.SetField(reserve.FieldUserID, field.TypeInt32, value)
		_node.UserID = value
	}
	if value, ok := rc.mutation.StartTime(); ok {
		_spec.SetField(reserve.FieldStartTime, field.TypeString, value)
		_node.StartTime = value
	}
	if value, ok := rc.mutation.OrderedID(); ok {
		_spec.SetField(reserve.FieldOrderedID, field.TypeString, value)
		_node.OrderedID = value
	}
	if value, ok := rc.mutation.Day(); ok {
		_spec.SetField(reserve.FieldDay, field.TypeString, value)
		_node.Day = value
	}
	if value, ok := rc.mutation.Detail(); ok {
		_spec.SetField(reserve.FieldDetail, field.TypeString, value)
		_node.Detail = value
	}
	return _node, _spec
}

// ReserveCreateBulk is the builder for creating many Reserve entities in bulk.
type ReserveCreateBulk struct {
	config
	err      error
	builders []*ReserveCreate
}

// Save creates the Reserve entities in the database.
func (rcb *ReserveCreateBulk) Save(ctx context.Context) ([]*Reserve, error) {
	if rcb.err != nil {
		return nil, rcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Reserve, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReserveMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *ReserveCreateBulk) SaveX(ctx context.Context) []*Reserve {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *ReserveCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *ReserveCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
