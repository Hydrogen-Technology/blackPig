// Code generated by ent, DO NOT EDIT.

package timelist

import (
	"service/internal/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.TimeList {
	return predicate.TimeList(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.TimeList {
	return predicate.TimeList(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.TimeList {
	return predicate.TimeList(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.TimeList {
	return predicate.TimeList(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.TimeList {
	return predicate.TimeList(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.TimeList {
	return predicate.TimeList(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.TimeList {
	return predicate.TimeList(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.TimeList {
	return predicate.TimeList(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.TimeList {
	return predicate.TimeList(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v string) predicate.TimeList {
	return predicate.TimeList(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v string) predicate.TimeList {
	return predicate.TimeList(sql.FieldEQ(FieldUpdatedAt, v))
}

// TimesID applies equality check predicate on the "times_id" field. It's identical to TimesIDEQ.
func TimesID(v int64) predicate.TimeList {
	return predicate.TimeList(sql.FieldEQ(FieldTimesID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v string) predicate.TimeList {
	return predicate.TimeList(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v string) predicate.TimeList {
	return predicate.TimeList(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...string) predicate.TimeList {
	return predicate.TimeList(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...string) predicate.TimeList {
	return predicate.TimeList(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v string) predicate.TimeList {
	return predicate.TimeList(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v string) predicate.TimeList {
	return predicate.TimeList(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v string) predicate.TimeList {
	return predicate.TimeList(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v string) predicate.TimeList {
	return predicate.TimeList(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtContains applies the Contains predicate on the "created_at" field.
func CreatedAtContains(v string) predicate.TimeList {
	return predicate.TimeList(sql.FieldContains(FieldCreatedAt, v))
}

// CreatedAtHasPrefix applies the HasPrefix predicate on the "created_at" field.
func CreatedAtHasPrefix(v string) predicate.TimeList {
	return predicate.TimeList(sql.FieldHasPrefix(FieldCreatedAt, v))
}

// CreatedAtHasSuffix applies the HasSuffix predicate on the "created_at" field.
func CreatedAtHasSuffix(v string) predicate.TimeList {
	return predicate.TimeList(sql.FieldHasSuffix(FieldCreatedAt, v))
}

// CreatedAtEqualFold applies the EqualFold predicate on the "created_at" field.
func CreatedAtEqualFold(v string) predicate.TimeList {
	return predicate.TimeList(sql.FieldEqualFold(FieldCreatedAt, v))
}

// CreatedAtContainsFold applies the ContainsFold predicate on the "created_at" field.
func CreatedAtContainsFold(v string) predicate.TimeList {
	return predicate.TimeList(sql.FieldContainsFold(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v string) predicate.TimeList {
	return predicate.TimeList(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v string) predicate.TimeList {
	return predicate.TimeList(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...string) predicate.TimeList {
	return predicate.TimeList(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...string) predicate.TimeList {
	return predicate.TimeList(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v string) predicate.TimeList {
	return predicate.TimeList(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v string) predicate.TimeList {
	return predicate.TimeList(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v string) predicate.TimeList {
	return predicate.TimeList(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v string) predicate.TimeList {
	return predicate.TimeList(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtContains applies the Contains predicate on the "updated_at" field.
func UpdatedAtContains(v string) predicate.TimeList {
	return predicate.TimeList(sql.FieldContains(FieldUpdatedAt, v))
}

// UpdatedAtHasPrefix applies the HasPrefix predicate on the "updated_at" field.
func UpdatedAtHasPrefix(v string) predicate.TimeList {
	return predicate.TimeList(sql.FieldHasPrefix(FieldUpdatedAt, v))
}

// UpdatedAtHasSuffix applies the HasSuffix predicate on the "updated_at" field.
func UpdatedAtHasSuffix(v string) predicate.TimeList {
	return predicate.TimeList(sql.FieldHasSuffix(FieldUpdatedAt, v))
}

// UpdatedAtEqualFold applies the EqualFold predicate on the "updated_at" field.
func UpdatedAtEqualFold(v string) predicate.TimeList {
	return predicate.TimeList(sql.FieldEqualFold(FieldUpdatedAt, v))
}

// UpdatedAtContainsFold applies the ContainsFold predicate on the "updated_at" field.
func UpdatedAtContainsFold(v string) predicate.TimeList {
	return predicate.TimeList(sql.FieldContainsFold(FieldUpdatedAt, v))
}

// TimesIDEQ applies the EQ predicate on the "times_id" field.
func TimesIDEQ(v int64) predicate.TimeList {
	return predicate.TimeList(sql.FieldEQ(FieldTimesID, v))
}

// TimesIDNEQ applies the NEQ predicate on the "times_id" field.
func TimesIDNEQ(v int64) predicate.TimeList {
	return predicate.TimeList(sql.FieldNEQ(FieldTimesID, v))
}

// TimesIDIn applies the In predicate on the "times_id" field.
func TimesIDIn(vs ...int64) predicate.TimeList {
	return predicate.TimeList(sql.FieldIn(FieldTimesID, vs...))
}

// TimesIDNotIn applies the NotIn predicate on the "times_id" field.
func TimesIDNotIn(vs ...int64) predicate.TimeList {
	return predicate.TimeList(sql.FieldNotIn(FieldTimesID, vs...))
}

// TimesIDGT applies the GT predicate on the "times_id" field.
func TimesIDGT(v int64) predicate.TimeList {
	return predicate.TimeList(sql.FieldGT(FieldTimesID, v))
}

// TimesIDGTE applies the GTE predicate on the "times_id" field.
func TimesIDGTE(v int64) predicate.TimeList {
	return predicate.TimeList(sql.FieldGTE(FieldTimesID, v))
}

// TimesIDLT applies the LT predicate on the "times_id" field.
func TimesIDLT(v int64) predicate.TimeList {
	return predicate.TimeList(sql.FieldLT(FieldTimesID, v))
}

// TimesIDLTE applies the LTE predicate on the "times_id" field.
func TimesIDLTE(v int64) predicate.TimeList {
	return predicate.TimeList(sql.FieldLTE(FieldTimesID, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TimeList) predicate.TimeList {
	return predicate.TimeList(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TimeList) predicate.TimeList {
	return predicate.TimeList(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TimeList) predicate.TimeList {
	return predicate.TimeList(sql.NotPredicates(p))
}
