// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"service/internal/ent/migrate"

	"service/internal/ent/reserve"
	"service/internal/ent/timelist"
	"service/internal/ent/times"
	"service/internal/ent/user"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Reserve is the client for interacting with the Reserve builders.
	Reserve *ReserveClient
	// TimeList is the client for interacting with the TimeList builders.
	TimeList *TimeListClient
	// Times is the client for interacting with the Times builders.
	Times *TimesClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Reserve = NewReserveClient(c.config)
	c.TimeList = NewTimeListClient(c.config)
	c.Times = NewTimesClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:      ctx,
		config:   cfg,
		Reserve:  NewReserveClient(cfg),
		TimeList: NewTimeListClient(cfg),
		Times:    NewTimesClient(cfg),
		User:     NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:      ctx,
		config:   cfg,
		Reserve:  NewReserveClient(cfg),
		TimeList: NewTimeListClient(cfg),
		Times:    NewTimesClient(cfg),
		User:     NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Reserve.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Reserve.Use(hooks...)
	c.TimeList.Use(hooks...)
	c.Times.Use(hooks...)
	c.User.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Reserve.Intercept(interceptors...)
	c.TimeList.Intercept(interceptors...)
	c.Times.Intercept(interceptors...)
	c.User.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ReserveMutation:
		return c.Reserve.mutate(ctx, m)
	case *TimeListMutation:
		return c.TimeList.mutate(ctx, m)
	case *TimesMutation:
		return c.Times.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ReserveClient is a client for the Reserve schema.
type ReserveClient struct {
	config
}

// NewReserveClient returns a client for the Reserve from the given config.
func NewReserveClient(c config) *ReserveClient {
	return &ReserveClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `reserve.Hooks(f(g(h())))`.
func (c *ReserveClient) Use(hooks ...Hook) {
	c.hooks.Reserve = append(c.hooks.Reserve, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `reserve.Intercept(f(g(h())))`.
func (c *ReserveClient) Intercept(interceptors ...Interceptor) {
	c.inters.Reserve = append(c.inters.Reserve, interceptors...)
}

// Create returns a builder for creating a Reserve entity.
func (c *ReserveClient) Create() *ReserveCreate {
	mutation := newReserveMutation(c.config, OpCreate)
	return &ReserveCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Reserve entities.
func (c *ReserveClient) CreateBulk(builders ...*ReserveCreate) *ReserveCreateBulk {
	return &ReserveCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ReserveClient) MapCreateBulk(slice any, setFunc func(*ReserveCreate, int)) *ReserveCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ReserveCreateBulk{err: fmt.Errorf("calling to ReserveClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ReserveCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ReserveCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Reserve.
func (c *ReserveClient) Update() *ReserveUpdate {
	mutation := newReserveMutation(c.config, OpUpdate)
	return &ReserveUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ReserveClient) UpdateOne(r *Reserve) *ReserveUpdateOne {
	mutation := newReserveMutation(c.config, OpUpdateOne, withReserve(r))
	return &ReserveUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ReserveClient) UpdateOneID(id int64) *ReserveUpdateOne {
	mutation := newReserveMutation(c.config, OpUpdateOne, withReserveID(id))
	return &ReserveUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Reserve.
func (c *ReserveClient) Delete() *ReserveDelete {
	mutation := newReserveMutation(c.config, OpDelete)
	return &ReserveDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ReserveClient) DeleteOne(r *Reserve) *ReserveDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ReserveClient) DeleteOneID(id int64) *ReserveDeleteOne {
	builder := c.Delete().Where(reserve.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ReserveDeleteOne{builder}
}

// Query returns a query builder for Reserve.
func (c *ReserveClient) Query() *ReserveQuery {
	return &ReserveQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeReserve},
		inters: c.Interceptors(),
	}
}

// Get returns a Reserve entity by its id.
func (c *ReserveClient) Get(ctx context.Context, id int64) (*Reserve, error) {
	return c.Query().Where(reserve.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ReserveClient) GetX(ctx context.Context, id int64) *Reserve {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ReserveClient) Hooks() []Hook {
	return c.hooks.Reserve
}

// Interceptors returns the client interceptors.
func (c *ReserveClient) Interceptors() []Interceptor {
	return c.inters.Reserve
}

func (c *ReserveClient) mutate(ctx context.Context, m *ReserveMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ReserveCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ReserveUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ReserveUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ReserveDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Reserve mutation op: %q", m.Op())
	}
}

// TimeListClient is a client for the TimeList schema.
type TimeListClient struct {
	config
}

// NewTimeListClient returns a client for the TimeList from the given config.
func NewTimeListClient(c config) *TimeListClient {
	return &TimeListClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `timelist.Hooks(f(g(h())))`.
func (c *TimeListClient) Use(hooks ...Hook) {
	c.hooks.TimeList = append(c.hooks.TimeList, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `timelist.Intercept(f(g(h())))`.
func (c *TimeListClient) Intercept(interceptors ...Interceptor) {
	c.inters.TimeList = append(c.inters.TimeList, interceptors...)
}

// Create returns a builder for creating a TimeList entity.
func (c *TimeListClient) Create() *TimeListCreate {
	mutation := newTimeListMutation(c.config, OpCreate)
	return &TimeListCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TimeList entities.
func (c *TimeListClient) CreateBulk(builders ...*TimeListCreate) *TimeListCreateBulk {
	return &TimeListCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TimeListClient) MapCreateBulk(slice any, setFunc func(*TimeListCreate, int)) *TimeListCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TimeListCreateBulk{err: fmt.Errorf("calling to TimeListClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TimeListCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TimeListCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TimeList.
func (c *TimeListClient) Update() *TimeListUpdate {
	mutation := newTimeListMutation(c.config, OpUpdate)
	return &TimeListUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TimeListClient) UpdateOne(tl *TimeList) *TimeListUpdateOne {
	mutation := newTimeListMutation(c.config, OpUpdateOne, withTimeList(tl))
	return &TimeListUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TimeListClient) UpdateOneID(id int64) *TimeListUpdateOne {
	mutation := newTimeListMutation(c.config, OpUpdateOne, withTimeListID(id))
	return &TimeListUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TimeList.
func (c *TimeListClient) Delete() *TimeListDelete {
	mutation := newTimeListMutation(c.config, OpDelete)
	return &TimeListDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TimeListClient) DeleteOne(tl *TimeList) *TimeListDeleteOne {
	return c.DeleteOneID(tl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TimeListClient) DeleteOneID(id int64) *TimeListDeleteOne {
	builder := c.Delete().Where(timelist.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TimeListDeleteOne{builder}
}

// Query returns a query builder for TimeList.
func (c *TimeListClient) Query() *TimeListQuery {
	return &TimeListQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTimeList},
		inters: c.Interceptors(),
	}
}

// Get returns a TimeList entity by its id.
func (c *TimeListClient) Get(ctx context.Context, id int64) (*TimeList, error) {
	return c.Query().Where(timelist.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TimeListClient) GetX(ctx context.Context, id int64) *TimeList {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TimeListClient) Hooks() []Hook {
	return c.hooks.TimeList
}

// Interceptors returns the client interceptors.
func (c *TimeListClient) Interceptors() []Interceptor {
	return c.inters.TimeList
}

func (c *TimeListClient) mutate(ctx context.Context, m *TimeListMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TimeListCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TimeListUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TimeListUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TimeListDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown TimeList mutation op: %q", m.Op())
	}
}

// TimesClient is a client for the Times schema.
type TimesClient struct {
	config
}

// NewTimesClient returns a client for the Times from the given config.
func NewTimesClient(c config) *TimesClient {
	return &TimesClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `times.Hooks(f(g(h())))`.
func (c *TimesClient) Use(hooks ...Hook) {
	c.hooks.Times = append(c.hooks.Times, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `times.Intercept(f(g(h())))`.
func (c *TimesClient) Intercept(interceptors ...Interceptor) {
	c.inters.Times = append(c.inters.Times, interceptors...)
}

// Create returns a builder for creating a Times entity.
func (c *TimesClient) Create() *TimesCreate {
	mutation := newTimesMutation(c.config, OpCreate)
	return &TimesCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Times entities.
func (c *TimesClient) CreateBulk(builders ...*TimesCreate) *TimesCreateBulk {
	return &TimesCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TimesClient) MapCreateBulk(slice any, setFunc func(*TimesCreate, int)) *TimesCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TimesCreateBulk{err: fmt.Errorf("calling to TimesClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TimesCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TimesCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Times.
func (c *TimesClient) Update() *TimesUpdate {
	mutation := newTimesMutation(c.config, OpUpdate)
	return &TimesUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TimesClient) UpdateOne(t *Times) *TimesUpdateOne {
	mutation := newTimesMutation(c.config, OpUpdateOne, withTimes(t))
	return &TimesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TimesClient) UpdateOneID(id int64) *TimesUpdateOne {
	mutation := newTimesMutation(c.config, OpUpdateOne, withTimesID(id))
	return &TimesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Times.
func (c *TimesClient) Delete() *TimesDelete {
	mutation := newTimesMutation(c.config, OpDelete)
	return &TimesDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TimesClient) DeleteOne(t *Times) *TimesDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TimesClient) DeleteOneID(id int64) *TimesDeleteOne {
	builder := c.Delete().Where(times.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TimesDeleteOne{builder}
}

// Query returns a query builder for Times.
func (c *TimesClient) Query() *TimesQuery {
	return &TimesQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTimes},
		inters: c.Interceptors(),
	}
}

// Get returns a Times entity by its id.
func (c *TimesClient) Get(ctx context.Context, id int64) (*Times, error) {
	return c.Query().Where(times.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TimesClient) GetX(ctx context.Context, id int64) *Times {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TimesClient) Hooks() []Hook {
	return c.hooks.Times
}

// Interceptors returns the client interceptors.
func (c *TimesClient) Interceptors() []Interceptor {
	return c.inters.Times
}

func (c *TimesClient) mutate(ctx context.Context, m *TimesMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TimesCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TimesUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TimesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TimesDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Times mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int32) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int32) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int32) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int32) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Reserve, TimeList, Times, User []ent.Hook
	}
	inters struct {
		Reserve, TimeList, Times, User []ent.Interceptor
	}
)
