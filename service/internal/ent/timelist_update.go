// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"service/internal/ent/predicate"
	"service/internal/ent/timelist"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TimeListUpdate is the builder for updating TimeList entities.
type TimeListUpdate struct {
	config
	hooks    []Hook
	mutation *TimeListMutation
}

// Where appends a list predicates to the TimeListUpdate builder.
func (tlu *TimeListUpdate) Where(ps ...predicate.TimeList) *TimeListUpdate {
	tlu.mutation.Where(ps...)
	return tlu
}

// SetCreatedAt sets the "created_at" field.
func (tlu *TimeListUpdate) SetCreatedAt(s string) *TimeListUpdate {
	tlu.mutation.SetCreatedAt(s)
	return tlu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tlu *TimeListUpdate) SetNillableCreatedAt(s *string) *TimeListUpdate {
	if s != nil {
		tlu.SetCreatedAt(*s)
	}
	return tlu
}

// SetUpdatedAt sets the "updated_at" field.
func (tlu *TimeListUpdate) SetUpdatedAt(s string) *TimeListUpdate {
	tlu.mutation.SetUpdatedAt(s)
	return tlu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tlu *TimeListUpdate) SetNillableUpdatedAt(s *string) *TimeListUpdate {
	if s != nil {
		tlu.SetUpdatedAt(*s)
	}
	return tlu
}

// SetTimesID sets the "times_id" field.
func (tlu *TimeListUpdate) SetTimesID(i int64) *TimeListUpdate {
	tlu.mutation.ResetTimesID()
	tlu.mutation.SetTimesID(i)
	return tlu
}

// SetNillableTimesID sets the "times_id" field if the given value is not nil.
func (tlu *TimeListUpdate) SetNillableTimesID(i *int64) *TimeListUpdate {
	if i != nil {
		tlu.SetTimesID(*i)
	}
	return tlu
}

// AddTimesID adds i to the "times_id" field.
func (tlu *TimeListUpdate) AddTimesID(i int64) *TimeListUpdate {
	tlu.mutation.AddTimesID(i)
	return tlu
}

// Mutation returns the TimeListMutation object of the builder.
func (tlu *TimeListUpdate) Mutation() *TimeListMutation {
	return tlu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tlu *TimeListUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tlu.sqlSave, tlu.mutation, tlu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tlu *TimeListUpdate) SaveX(ctx context.Context) int {
	affected, err := tlu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tlu *TimeListUpdate) Exec(ctx context.Context) error {
	_, err := tlu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tlu *TimeListUpdate) ExecX(ctx context.Context) {
	if err := tlu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tlu *TimeListUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(timelist.Table, timelist.Columns, sqlgraph.NewFieldSpec(timelist.FieldID, field.TypeInt64))
	if ps := tlu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tlu.mutation.CreatedAt(); ok {
		_spec.SetField(timelist.FieldCreatedAt, field.TypeString, value)
	}
	if value, ok := tlu.mutation.UpdatedAt(); ok {
		_spec.SetField(timelist.FieldUpdatedAt, field.TypeString, value)
	}
	if value, ok := tlu.mutation.TimesID(); ok {
		_spec.SetField(timelist.FieldTimesID, field.TypeInt64, value)
	}
	if value, ok := tlu.mutation.AddedTimesID(); ok {
		_spec.AddField(timelist.FieldTimesID, field.TypeInt64, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tlu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{timelist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tlu.mutation.done = true
	return n, nil
}

// TimeListUpdateOne is the builder for updating a single TimeList entity.
type TimeListUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TimeListMutation
}

// SetCreatedAt sets the "created_at" field.
func (tluo *TimeListUpdateOne) SetCreatedAt(s string) *TimeListUpdateOne {
	tluo.mutation.SetCreatedAt(s)
	return tluo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tluo *TimeListUpdateOne) SetNillableCreatedAt(s *string) *TimeListUpdateOne {
	if s != nil {
		tluo.SetCreatedAt(*s)
	}
	return tluo
}

// SetUpdatedAt sets the "updated_at" field.
func (tluo *TimeListUpdateOne) SetUpdatedAt(s string) *TimeListUpdateOne {
	tluo.mutation.SetUpdatedAt(s)
	return tluo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tluo *TimeListUpdateOne) SetNillableUpdatedAt(s *string) *TimeListUpdateOne {
	if s != nil {
		tluo.SetUpdatedAt(*s)
	}
	return tluo
}

// SetTimesID sets the "times_id" field.
func (tluo *TimeListUpdateOne) SetTimesID(i int64) *TimeListUpdateOne {
	tluo.mutation.ResetTimesID()
	tluo.mutation.SetTimesID(i)
	return tluo
}

// SetNillableTimesID sets the "times_id" field if the given value is not nil.
func (tluo *TimeListUpdateOne) SetNillableTimesID(i *int64) *TimeListUpdateOne {
	if i != nil {
		tluo.SetTimesID(*i)
	}
	return tluo
}

// AddTimesID adds i to the "times_id" field.
func (tluo *TimeListUpdateOne) AddTimesID(i int64) *TimeListUpdateOne {
	tluo.mutation.AddTimesID(i)
	return tluo
}

// Mutation returns the TimeListMutation object of the builder.
func (tluo *TimeListUpdateOne) Mutation() *TimeListMutation {
	return tluo.mutation
}

// Where appends a list predicates to the TimeListUpdate builder.
func (tluo *TimeListUpdateOne) Where(ps ...predicate.TimeList) *TimeListUpdateOne {
	tluo.mutation.Where(ps...)
	return tluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tluo *TimeListUpdateOne) Select(field string, fields ...string) *TimeListUpdateOne {
	tluo.fields = append([]string{field}, fields...)
	return tluo
}

// Save executes the query and returns the updated TimeList entity.
func (tluo *TimeListUpdateOne) Save(ctx context.Context) (*TimeList, error) {
	return withHooks(ctx, tluo.sqlSave, tluo.mutation, tluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tluo *TimeListUpdateOne) SaveX(ctx context.Context) *TimeList {
	node, err := tluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tluo *TimeListUpdateOne) Exec(ctx context.Context) error {
	_, err := tluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tluo *TimeListUpdateOne) ExecX(ctx context.Context) {
	if err := tluo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tluo *TimeListUpdateOne) sqlSave(ctx context.Context) (_node *TimeList, err error) {
	_spec := sqlgraph.NewUpdateSpec(timelist.Table, timelist.Columns, sqlgraph.NewFieldSpec(timelist.FieldID, field.TypeInt64))
	id, ok := tluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TimeList.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, timelist.FieldID)
		for _, f := range fields {
			if !timelist.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != timelist.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tluo.mutation.CreatedAt(); ok {
		_spec.SetField(timelist.FieldCreatedAt, field.TypeString, value)
	}
	if value, ok := tluo.mutation.UpdatedAt(); ok {
		_spec.SetField(timelist.FieldUpdatedAt, field.TypeString, value)
	}
	if value, ok := tluo.mutation.TimesID(); ok {
		_spec.SetField(timelist.FieldTimesID, field.TypeInt64, value)
	}
	if value, ok := tluo.mutation.AddedTimesID(); ok {
		_spec.AddField(timelist.FieldTimesID, field.TypeInt64, value)
	}
	_node = &TimeList{config: tluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{timelist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tluo.mutation.done = true
	return _node, nil
}
