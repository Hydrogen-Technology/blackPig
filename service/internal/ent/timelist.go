// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"service/internal/ent/timelist"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// TimeList is the model entity for the TimeList schema.
type TimeList struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt string `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt string `json:"updated_at,omitempty"`
	// TimesID holds the value of the "times_id" field.
	TimesID      int64 `json:"times_id,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TimeList) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case timelist.FieldID, timelist.FieldTimesID:
			values[i] = new(sql.NullInt64)
		case timelist.FieldCreatedAt, timelist.FieldUpdatedAt:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TimeList fields.
func (tl *TimeList) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case timelist.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tl.ID = int64(value.Int64)
		case timelist.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tl.CreatedAt = value.String
			}
		case timelist.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tl.UpdatedAt = value.String
			}
		case timelist.FieldTimesID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field times_id", values[i])
			} else if value.Valid {
				tl.TimesID = value.Int64
			}
		default:
			tl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TimeList.
// This includes values selected through modifiers, order, etc.
func (tl *TimeList) Value(name string) (ent.Value, error) {
	return tl.selectValues.Get(name)
}

// Update returns a builder for updating this TimeList.
// Note that you need to call TimeList.Unwrap() before calling this method if this TimeList
// was returned from a transaction, and the transaction was committed or rolled back.
func (tl *TimeList) Update() *TimeListUpdateOne {
	return NewTimeListClient(tl.config).UpdateOne(tl)
}

// Unwrap unwraps the TimeList entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tl *TimeList) Unwrap() *TimeList {
	_tx, ok := tl.config.driver.(*txDriver)
	if !ok {
		panic("ent: TimeList is not a transactional entity")
	}
	tl.config.driver = _tx.drv
	return tl
}

// String implements the fmt.Stringer.
func (tl *TimeList) String() string {
	var builder strings.Builder
	builder.WriteString("TimeList(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tl.ID))
	builder.WriteString("created_at=")
	builder.WriteString(tl.CreatedAt)
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(tl.UpdatedAt)
	builder.WriteString(", ")
	builder.WriteString("times_id=")
	builder.WriteString(fmt.Sprintf("%v", tl.TimesID))
	builder.WriteByte(')')
	return builder.String()
}

// TimeLists is a parsable slice of TimeList.
type TimeLists []*TimeList
