// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"service/internal/ent/predicate"
	"service/internal/ent/reserve"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ReserveUpdate is the builder for updating Reserve entities.
type ReserveUpdate struct {
	config
	hooks    []Hook
	mutation *ReserveMutation
}

// Where appends a list predicates to the ReserveUpdate builder.
func (ru *ReserveUpdate) Where(ps ...predicate.Reserve) *ReserveUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetCreatedAt sets the "created_at" field.
func (ru *ReserveUpdate) SetCreatedAt(t time.Time) *ReserveUpdate {
	ru.mutation.SetCreatedAt(t)
	return ru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ru *ReserveUpdate) SetNillableCreatedAt(t *time.Time) *ReserveUpdate {
	if t != nil {
		ru.SetCreatedAt(*t)
	}
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *ReserveUpdate) SetUpdatedAt(t time.Time) *ReserveUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ru *ReserveUpdate) SetNillableUpdatedAt(t *time.Time) *ReserveUpdate {
	if t != nil {
		ru.SetUpdatedAt(*t)
	}
	return ru
}

// SetUserID sets the "user_id" field.
func (ru *ReserveUpdate) SetUserID(i int32) *ReserveUpdate {
	ru.mutation.ResetUserID()
	ru.mutation.SetUserID(i)
	return ru
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ru *ReserveUpdate) SetNillableUserID(i *int32) *ReserveUpdate {
	if i != nil {
		ru.SetUserID(*i)
	}
	return ru
}

// AddUserID adds i to the "user_id" field.
func (ru *ReserveUpdate) AddUserID(i int32) *ReserveUpdate {
	ru.mutation.AddUserID(i)
	return ru
}

// SetStartTime sets the "start_time" field.
func (ru *ReserveUpdate) SetStartTime(s string) *ReserveUpdate {
	ru.mutation.SetStartTime(s)
	return ru
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (ru *ReserveUpdate) SetNillableStartTime(s *string) *ReserveUpdate {
	if s != nil {
		ru.SetStartTime(*s)
	}
	return ru
}

// SetOrderedID sets the "ordered_id" field.
func (ru *ReserveUpdate) SetOrderedID(s string) *ReserveUpdate {
	ru.mutation.SetOrderedID(s)
	return ru
}

// SetNillableOrderedID sets the "ordered_id" field if the given value is not nil.
func (ru *ReserveUpdate) SetNillableOrderedID(s *string) *ReserveUpdate {
	if s != nil {
		ru.SetOrderedID(*s)
	}
	return ru
}

// SetDay sets the "day" field.
func (ru *ReserveUpdate) SetDay(s string) *ReserveUpdate {
	ru.mutation.SetDay(s)
	return ru
}

// SetNillableDay sets the "day" field if the given value is not nil.
func (ru *ReserveUpdate) SetNillableDay(s *string) *ReserveUpdate {
	if s != nil {
		ru.SetDay(*s)
	}
	return ru
}

// SetDetail sets the "detail" field.
func (ru *ReserveUpdate) SetDetail(s string) *ReserveUpdate {
	ru.mutation.SetDetail(s)
	return ru
}

// SetNillableDetail sets the "detail" field if the given value is not nil.
func (ru *ReserveUpdate) SetNillableDetail(s *string) *ReserveUpdate {
	if s != nil {
		ru.SetDetail(*s)
	}
	return ru
}

// Mutation returns the ReserveMutation object of the builder.
func (ru *ReserveUpdate) Mutation() *ReserveMutation {
	return ru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *ReserveUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *ReserveUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *ReserveUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *ReserveUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *ReserveUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(reserve.Table, reserve.Columns, sqlgraph.NewFieldSpec(reserve.FieldID, field.TypeInt64))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.CreatedAt(); ok {
		_spec.SetField(reserve.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.SetField(reserve.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ru.mutation.UserID(); ok {
		_spec.SetField(reserve.FieldUserID, field.TypeInt32, value)
	}
	if value, ok := ru.mutation.AddedUserID(); ok {
		_spec.AddField(reserve.FieldUserID, field.TypeInt32, value)
	}
	if value, ok := ru.mutation.StartTime(); ok {
		_spec.SetField(reserve.FieldStartTime, field.TypeString, value)
	}
	if value, ok := ru.mutation.OrderedID(); ok {
		_spec.SetField(reserve.FieldOrderedID, field.TypeString, value)
	}
	if value, ok := ru.mutation.Day(); ok {
		_spec.SetField(reserve.FieldDay, field.TypeString, value)
	}
	if value, ok := ru.mutation.Detail(); ok {
		_spec.SetField(reserve.FieldDetail, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reserve.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// ReserveUpdateOne is the builder for updating a single Reserve entity.
type ReserveUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReserveMutation
}

// SetCreatedAt sets the "created_at" field.
func (ruo *ReserveUpdateOne) SetCreatedAt(t time.Time) *ReserveUpdateOne {
	ruo.mutation.SetCreatedAt(t)
	return ruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ruo *ReserveUpdateOne) SetNillableCreatedAt(t *time.Time) *ReserveUpdateOne {
	if t != nil {
		ruo.SetCreatedAt(*t)
	}
	return ruo
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *ReserveUpdateOne) SetUpdatedAt(t time.Time) *ReserveUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ruo *ReserveUpdateOne) SetNillableUpdatedAt(t *time.Time) *ReserveUpdateOne {
	if t != nil {
		ruo.SetUpdatedAt(*t)
	}
	return ruo
}

// SetUserID sets the "user_id" field.
func (ruo *ReserveUpdateOne) SetUserID(i int32) *ReserveUpdateOne {
	ruo.mutation.ResetUserID()
	ruo.mutation.SetUserID(i)
	return ruo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ruo *ReserveUpdateOne) SetNillableUserID(i *int32) *ReserveUpdateOne {
	if i != nil {
		ruo.SetUserID(*i)
	}
	return ruo
}

// AddUserID adds i to the "user_id" field.
func (ruo *ReserveUpdateOne) AddUserID(i int32) *ReserveUpdateOne {
	ruo.mutation.AddUserID(i)
	return ruo
}

// SetStartTime sets the "start_time" field.
func (ruo *ReserveUpdateOne) SetStartTime(s string) *ReserveUpdateOne {
	ruo.mutation.SetStartTime(s)
	return ruo
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (ruo *ReserveUpdateOne) SetNillableStartTime(s *string) *ReserveUpdateOne {
	if s != nil {
		ruo.SetStartTime(*s)
	}
	return ruo
}

// SetOrderedID sets the "ordered_id" field.
func (ruo *ReserveUpdateOne) SetOrderedID(s string) *ReserveUpdateOne {
	ruo.mutation.SetOrderedID(s)
	return ruo
}

// SetNillableOrderedID sets the "ordered_id" field if the given value is not nil.
func (ruo *ReserveUpdateOne) SetNillableOrderedID(s *string) *ReserveUpdateOne {
	if s != nil {
		ruo.SetOrderedID(*s)
	}
	return ruo
}

// SetDay sets the "day" field.
func (ruo *ReserveUpdateOne) SetDay(s string) *ReserveUpdateOne {
	ruo.mutation.SetDay(s)
	return ruo
}

// SetNillableDay sets the "day" field if the given value is not nil.
func (ruo *ReserveUpdateOne) SetNillableDay(s *string) *ReserveUpdateOne {
	if s != nil {
		ruo.SetDay(*s)
	}
	return ruo
}

// SetDetail sets the "detail" field.
func (ruo *ReserveUpdateOne) SetDetail(s string) *ReserveUpdateOne {
	ruo.mutation.SetDetail(s)
	return ruo
}

// SetNillableDetail sets the "detail" field if the given value is not nil.
func (ruo *ReserveUpdateOne) SetNillableDetail(s *string) *ReserveUpdateOne {
	if s != nil {
		ruo.SetDetail(*s)
	}
	return ruo
}

// Mutation returns the ReserveMutation object of the builder.
func (ruo *ReserveUpdateOne) Mutation() *ReserveMutation {
	return ruo.mutation
}

// Where appends a list predicates to the ReserveUpdate builder.
func (ruo *ReserveUpdateOne) Where(ps ...predicate.Reserve) *ReserveUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *ReserveUpdateOne) Select(field string, fields ...string) *ReserveUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Reserve entity.
func (ruo *ReserveUpdateOne) Save(ctx context.Context) (*Reserve, error) {
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *ReserveUpdateOne) SaveX(ctx context.Context) *Reserve {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *ReserveUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *ReserveUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *ReserveUpdateOne) sqlSave(ctx context.Context) (_node *Reserve, err error) {
	_spec := sqlgraph.NewUpdateSpec(reserve.Table, reserve.Columns, sqlgraph.NewFieldSpec(reserve.FieldID, field.TypeInt64))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Reserve.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, reserve.FieldID)
		for _, f := range fields {
			if !reserve.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != reserve.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.CreatedAt(); ok {
		_spec.SetField(reserve.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.SetField(reserve.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.UserID(); ok {
		_spec.SetField(reserve.FieldUserID, field.TypeInt32, value)
	}
	if value, ok := ruo.mutation.AddedUserID(); ok {
		_spec.AddField(reserve.FieldUserID, field.TypeInt32, value)
	}
	if value, ok := ruo.mutation.StartTime(); ok {
		_spec.SetField(reserve.FieldStartTime, field.TypeString, value)
	}
	if value, ok := ruo.mutation.OrderedID(); ok {
		_spec.SetField(reserve.FieldOrderedID, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Day(); ok {
		_spec.SetField(reserve.FieldDay, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Detail(); ok {
		_spec.SetField(reserve.FieldDetail, field.TypeString, value)
	}
	_node = &Reserve{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reserve.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
