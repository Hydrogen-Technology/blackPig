// Code generated by ent, DO NOT EDIT.

package reserve

import (
	"service/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Reserve {
	return predicate.Reserve(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Reserve {
	return predicate.Reserve(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Reserve {
	return predicate.Reserve(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Reserve {
	return predicate.Reserve(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Reserve {
	return predicate.Reserve(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Reserve {
	return predicate.Reserve(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Reserve {
	return predicate.Reserve(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Reserve {
	return predicate.Reserve(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Reserve {
	return predicate.Reserve(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Reserve {
	return predicate.Reserve(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Reserve {
	return predicate.Reserve(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int32) predicate.Reserve {
	return predicate.Reserve(sql.FieldEQ(FieldUserID, v))
}

// StartTime applies equality check predicate on the "start_time" field. It's identical to StartTimeEQ.
func StartTime(v string) predicate.Reserve {
	return predicate.Reserve(sql.FieldEQ(FieldStartTime, v))
}

// OrderedID applies equality check predicate on the "ordered_id" field. It's identical to OrderedIDEQ.
func OrderedID(v string) predicate.Reserve {
	return predicate.Reserve(sql.FieldEQ(FieldOrderedID, v))
}

// Day applies equality check predicate on the "day" field. It's identical to DayEQ.
func Day(v string) predicate.Reserve {
	return predicate.Reserve(sql.FieldEQ(FieldDay, v))
}

// Detail applies equality check predicate on the "detail" field. It's identical to DetailEQ.
func Detail(v string) predicate.Reserve {
	return predicate.Reserve(sql.FieldEQ(FieldDetail, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Reserve {
	return predicate.Reserve(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Reserve {
	return predicate.Reserve(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Reserve {
	return predicate.Reserve(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Reserve {
	return predicate.Reserve(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Reserve {
	return predicate.Reserve(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Reserve {
	return predicate.Reserve(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Reserve {
	return predicate.Reserve(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Reserve {
	return predicate.Reserve(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Reserve {
	return predicate.Reserve(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Reserve {
	return predicate.Reserve(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Reserve {
	return predicate.Reserve(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Reserve {
	return predicate.Reserve(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Reserve {
	return predicate.Reserve(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Reserve {
	return predicate.Reserve(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Reserve {
	return predicate.Reserve(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Reserve {
	return predicate.Reserve(sql.FieldLTE(FieldUpdatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int32) predicate.Reserve {
	return predicate.Reserve(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int32) predicate.Reserve {
	return predicate.Reserve(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int32) predicate.Reserve {
	return predicate.Reserve(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int32) predicate.Reserve {
	return predicate.Reserve(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v int32) predicate.Reserve {
	return predicate.Reserve(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v int32) predicate.Reserve {
	return predicate.Reserve(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v int32) predicate.Reserve {
	return predicate.Reserve(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v int32) predicate.Reserve {
	return predicate.Reserve(sql.FieldLTE(FieldUserID, v))
}

// StartTimeEQ applies the EQ predicate on the "start_time" field.
func StartTimeEQ(v string) predicate.Reserve {
	return predicate.Reserve(sql.FieldEQ(FieldStartTime, v))
}

// StartTimeNEQ applies the NEQ predicate on the "start_time" field.
func StartTimeNEQ(v string) predicate.Reserve {
	return predicate.Reserve(sql.FieldNEQ(FieldStartTime, v))
}

// StartTimeIn applies the In predicate on the "start_time" field.
func StartTimeIn(vs ...string) predicate.Reserve {
	return predicate.Reserve(sql.FieldIn(FieldStartTime, vs...))
}

// StartTimeNotIn applies the NotIn predicate on the "start_time" field.
func StartTimeNotIn(vs ...string) predicate.Reserve {
	return predicate.Reserve(sql.FieldNotIn(FieldStartTime, vs...))
}

// StartTimeGT applies the GT predicate on the "start_time" field.
func StartTimeGT(v string) predicate.Reserve {
	return predicate.Reserve(sql.FieldGT(FieldStartTime, v))
}

// StartTimeGTE applies the GTE predicate on the "start_time" field.
func StartTimeGTE(v string) predicate.Reserve {
	return predicate.Reserve(sql.FieldGTE(FieldStartTime, v))
}

// StartTimeLT applies the LT predicate on the "start_time" field.
func StartTimeLT(v string) predicate.Reserve {
	return predicate.Reserve(sql.FieldLT(FieldStartTime, v))
}

// StartTimeLTE applies the LTE predicate on the "start_time" field.
func StartTimeLTE(v string) predicate.Reserve {
	return predicate.Reserve(sql.FieldLTE(FieldStartTime, v))
}

// StartTimeContains applies the Contains predicate on the "start_time" field.
func StartTimeContains(v string) predicate.Reserve {
	return predicate.Reserve(sql.FieldContains(FieldStartTime, v))
}

// StartTimeHasPrefix applies the HasPrefix predicate on the "start_time" field.
func StartTimeHasPrefix(v string) predicate.Reserve {
	return predicate.Reserve(sql.FieldHasPrefix(FieldStartTime, v))
}

// StartTimeHasSuffix applies the HasSuffix predicate on the "start_time" field.
func StartTimeHasSuffix(v string) predicate.Reserve {
	return predicate.Reserve(sql.FieldHasSuffix(FieldStartTime, v))
}

// StartTimeEqualFold applies the EqualFold predicate on the "start_time" field.
func StartTimeEqualFold(v string) predicate.Reserve {
	return predicate.Reserve(sql.FieldEqualFold(FieldStartTime, v))
}

// StartTimeContainsFold applies the ContainsFold predicate on the "start_time" field.
func StartTimeContainsFold(v string) predicate.Reserve {
	return predicate.Reserve(sql.FieldContainsFold(FieldStartTime, v))
}

// OrderedIDEQ applies the EQ predicate on the "ordered_id" field.
func OrderedIDEQ(v string) predicate.Reserve {
	return predicate.Reserve(sql.FieldEQ(FieldOrderedID, v))
}

// OrderedIDNEQ applies the NEQ predicate on the "ordered_id" field.
func OrderedIDNEQ(v string) predicate.Reserve {
	return predicate.Reserve(sql.FieldNEQ(FieldOrderedID, v))
}

// OrderedIDIn applies the In predicate on the "ordered_id" field.
func OrderedIDIn(vs ...string) predicate.Reserve {
	return predicate.Reserve(sql.FieldIn(FieldOrderedID, vs...))
}

// OrderedIDNotIn applies the NotIn predicate on the "ordered_id" field.
func OrderedIDNotIn(vs ...string) predicate.Reserve {
	return predicate.Reserve(sql.FieldNotIn(FieldOrderedID, vs...))
}

// OrderedIDGT applies the GT predicate on the "ordered_id" field.
func OrderedIDGT(v string) predicate.Reserve {
	return predicate.Reserve(sql.FieldGT(FieldOrderedID, v))
}

// OrderedIDGTE applies the GTE predicate on the "ordered_id" field.
func OrderedIDGTE(v string) predicate.Reserve {
	return predicate.Reserve(sql.FieldGTE(FieldOrderedID, v))
}

// OrderedIDLT applies the LT predicate on the "ordered_id" field.
func OrderedIDLT(v string) predicate.Reserve {
	return predicate.Reserve(sql.FieldLT(FieldOrderedID, v))
}

// OrderedIDLTE applies the LTE predicate on the "ordered_id" field.
func OrderedIDLTE(v string) predicate.Reserve {
	return predicate.Reserve(sql.FieldLTE(FieldOrderedID, v))
}

// OrderedIDContains applies the Contains predicate on the "ordered_id" field.
func OrderedIDContains(v string) predicate.Reserve {
	return predicate.Reserve(sql.FieldContains(FieldOrderedID, v))
}

// OrderedIDHasPrefix applies the HasPrefix predicate on the "ordered_id" field.
func OrderedIDHasPrefix(v string) predicate.Reserve {
	return predicate.Reserve(sql.FieldHasPrefix(FieldOrderedID, v))
}

// OrderedIDHasSuffix applies the HasSuffix predicate on the "ordered_id" field.
func OrderedIDHasSuffix(v string) predicate.Reserve {
	return predicate.Reserve(sql.FieldHasSuffix(FieldOrderedID, v))
}

// OrderedIDEqualFold applies the EqualFold predicate on the "ordered_id" field.
func OrderedIDEqualFold(v string) predicate.Reserve {
	return predicate.Reserve(sql.FieldEqualFold(FieldOrderedID, v))
}

// OrderedIDContainsFold applies the ContainsFold predicate on the "ordered_id" field.
func OrderedIDContainsFold(v string) predicate.Reserve {
	return predicate.Reserve(sql.FieldContainsFold(FieldOrderedID, v))
}

// DayEQ applies the EQ predicate on the "day" field.
func DayEQ(v string) predicate.Reserve {
	return predicate.Reserve(sql.FieldEQ(FieldDay, v))
}

// DayNEQ applies the NEQ predicate on the "day" field.
func DayNEQ(v string) predicate.Reserve {
	return predicate.Reserve(sql.FieldNEQ(FieldDay, v))
}

// DayIn applies the In predicate on the "day" field.
func DayIn(vs ...string) predicate.Reserve {
	return predicate.Reserve(sql.FieldIn(FieldDay, vs...))
}

// DayNotIn applies the NotIn predicate on the "day" field.
func DayNotIn(vs ...string) predicate.Reserve {
	return predicate.Reserve(sql.FieldNotIn(FieldDay, vs...))
}

// DayGT applies the GT predicate on the "day" field.
func DayGT(v string) predicate.Reserve {
	return predicate.Reserve(sql.FieldGT(FieldDay, v))
}

// DayGTE applies the GTE predicate on the "day" field.
func DayGTE(v string) predicate.Reserve {
	return predicate.Reserve(sql.FieldGTE(FieldDay, v))
}

// DayLT applies the LT predicate on the "day" field.
func DayLT(v string) predicate.Reserve {
	return predicate.Reserve(sql.FieldLT(FieldDay, v))
}

// DayLTE applies the LTE predicate on the "day" field.
func DayLTE(v string) predicate.Reserve {
	return predicate.Reserve(sql.FieldLTE(FieldDay, v))
}

// DayContains applies the Contains predicate on the "day" field.
func DayContains(v string) predicate.Reserve {
	return predicate.Reserve(sql.FieldContains(FieldDay, v))
}

// DayHasPrefix applies the HasPrefix predicate on the "day" field.
func DayHasPrefix(v string) predicate.Reserve {
	return predicate.Reserve(sql.FieldHasPrefix(FieldDay, v))
}

// DayHasSuffix applies the HasSuffix predicate on the "day" field.
func DayHasSuffix(v string) predicate.Reserve {
	return predicate.Reserve(sql.FieldHasSuffix(FieldDay, v))
}

// DayEqualFold applies the EqualFold predicate on the "day" field.
func DayEqualFold(v string) predicate.Reserve {
	return predicate.Reserve(sql.FieldEqualFold(FieldDay, v))
}

// DayContainsFold applies the ContainsFold predicate on the "day" field.
func DayContainsFold(v string) predicate.Reserve {
	return predicate.Reserve(sql.FieldContainsFold(FieldDay, v))
}

// DetailEQ applies the EQ predicate on the "detail" field.
func DetailEQ(v string) predicate.Reserve {
	return predicate.Reserve(sql.FieldEQ(FieldDetail, v))
}

// DetailNEQ applies the NEQ predicate on the "detail" field.
func DetailNEQ(v string) predicate.Reserve {
	return predicate.Reserve(sql.FieldNEQ(FieldDetail, v))
}

// DetailIn applies the In predicate on the "detail" field.
func DetailIn(vs ...string) predicate.Reserve {
	return predicate.Reserve(sql.FieldIn(FieldDetail, vs...))
}

// DetailNotIn applies the NotIn predicate on the "detail" field.
func DetailNotIn(vs ...string) predicate.Reserve {
	return predicate.Reserve(sql.FieldNotIn(FieldDetail, vs...))
}

// DetailGT applies the GT predicate on the "detail" field.
func DetailGT(v string) predicate.Reserve {
	return predicate.Reserve(sql.FieldGT(FieldDetail, v))
}

// DetailGTE applies the GTE predicate on the "detail" field.
func DetailGTE(v string) predicate.Reserve {
	return predicate.Reserve(sql.FieldGTE(FieldDetail, v))
}

// DetailLT applies the LT predicate on the "detail" field.
func DetailLT(v string) predicate.Reserve {
	return predicate.Reserve(sql.FieldLT(FieldDetail, v))
}

// DetailLTE applies the LTE predicate on the "detail" field.
func DetailLTE(v string) predicate.Reserve {
	return predicate.Reserve(sql.FieldLTE(FieldDetail, v))
}

// DetailContains applies the Contains predicate on the "detail" field.
func DetailContains(v string) predicate.Reserve {
	return predicate.Reserve(sql.FieldContains(FieldDetail, v))
}

// DetailHasPrefix applies the HasPrefix predicate on the "detail" field.
func DetailHasPrefix(v string) predicate.Reserve {
	return predicate.Reserve(sql.FieldHasPrefix(FieldDetail, v))
}

// DetailHasSuffix applies the HasSuffix predicate on the "detail" field.
func DetailHasSuffix(v string) predicate.Reserve {
	return predicate.Reserve(sql.FieldHasSuffix(FieldDetail, v))
}

// DetailEqualFold applies the EqualFold predicate on the "detail" field.
func DetailEqualFold(v string) predicate.Reserve {
	return predicate.Reserve(sql.FieldEqualFold(FieldDetail, v))
}

// DetailContainsFold applies the ContainsFold predicate on the "detail" field.
func DetailContainsFold(v string) predicate.Reserve {
	return predicate.Reserve(sql.FieldContainsFold(FieldDetail, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Reserve) predicate.Reserve {
	return predicate.Reserve(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Reserve) predicate.Reserve {
	return predicate.Reserve(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Reserve) predicate.Reserve {
	return predicate.Reserve(sql.NotPredicates(p))
}
