// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"service/internal/ent/predicate"
	"service/internal/ent/times"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TimesUpdate is the builder for updating Times entities.
type TimesUpdate struct {
	config
	hooks    []Hook
	mutation *TimesMutation
}

// Where appends a list predicates to the TimesUpdate builder.
func (tu *TimesUpdate) Where(ps ...predicate.Times) *TimesUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetUserId sets the "userId" field.
func (tu *TimesUpdate) SetUserId(i int64) *TimesUpdate {
	tu.mutation.ResetUserId()
	tu.mutation.SetUserId(i)
	return tu
}

// SetNillableUserId sets the "userId" field if the given value is not nil.
func (tu *TimesUpdate) SetNillableUserId(i *int64) *TimesUpdate {
	if i != nil {
		tu.SetUserId(*i)
	}
	return tu
}

// AddUserId adds i to the "userId" field.
func (tu *TimesUpdate) AddUserId(i int64) *TimesUpdate {
	tu.mutation.AddUserId(i)
	return tu
}

// SetTimeSpace sets the "timeSpace" field.
func (tu *TimesUpdate) SetTimeSpace(s string) *TimesUpdate {
	tu.mutation.SetTimeSpace(s)
	return tu
}

// SetNillableTimeSpace sets the "timeSpace" field if the given value is not nil.
func (tu *TimesUpdate) SetNillableTimeSpace(s *string) *TimesUpdate {
	if s != nil {
		tu.SetTimeSpace(*s)
	}
	return tu
}

// SetStartTime sets the "startTime" field.
func (tu *TimesUpdate) SetStartTime(s string) *TimesUpdate {
	tu.mutation.SetStartTime(s)
	return tu
}

// SetNillableStartTime sets the "startTime" field if the given value is not nil.
func (tu *TimesUpdate) SetNillableStartTime(s *string) *TimesUpdate {
	if s != nil {
		tu.SetStartTime(*s)
	}
	return tu
}

// Mutation returns the TimesMutation object of the builder.
func (tu *TimesUpdate) Mutation() *TimesMutation {
	return tu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TimesUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TimesUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TimesUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TimesUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TimesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(times.Table, times.Columns, sqlgraph.NewFieldSpec(times.FieldID, field.TypeInt64))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.UserId(); ok {
		_spec.SetField(times.FieldUserId, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.AddedUserId(); ok {
		_spec.AddField(times.FieldUserId, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.TimeSpace(); ok {
		_spec.SetField(times.FieldTimeSpace, field.TypeString, value)
	}
	if value, ok := tu.mutation.StartTime(); ok {
		_spec.SetField(times.FieldStartTime, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{times.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TimesUpdateOne is the builder for updating a single Times entity.
type TimesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TimesMutation
}

// SetUserId sets the "userId" field.
func (tuo *TimesUpdateOne) SetUserId(i int64) *TimesUpdateOne {
	tuo.mutation.ResetUserId()
	tuo.mutation.SetUserId(i)
	return tuo
}

// SetNillableUserId sets the "userId" field if the given value is not nil.
func (tuo *TimesUpdateOne) SetNillableUserId(i *int64) *TimesUpdateOne {
	if i != nil {
		tuo.SetUserId(*i)
	}
	return tuo
}

// AddUserId adds i to the "userId" field.
func (tuo *TimesUpdateOne) AddUserId(i int64) *TimesUpdateOne {
	tuo.mutation.AddUserId(i)
	return tuo
}

// SetTimeSpace sets the "timeSpace" field.
func (tuo *TimesUpdateOne) SetTimeSpace(s string) *TimesUpdateOne {
	tuo.mutation.SetTimeSpace(s)
	return tuo
}

// SetNillableTimeSpace sets the "timeSpace" field if the given value is not nil.
func (tuo *TimesUpdateOne) SetNillableTimeSpace(s *string) *TimesUpdateOne {
	if s != nil {
		tuo.SetTimeSpace(*s)
	}
	return tuo
}

// SetStartTime sets the "startTime" field.
func (tuo *TimesUpdateOne) SetStartTime(s string) *TimesUpdateOne {
	tuo.mutation.SetStartTime(s)
	return tuo
}

// SetNillableStartTime sets the "startTime" field if the given value is not nil.
func (tuo *TimesUpdateOne) SetNillableStartTime(s *string) *TimesUpdateOne {
	if s != nil {
		tuo.SetStartTime(*s)
	}
	return tuo
}

// Mutation returns the TimesMutation object of the builder.
func (tuo *TimesUpdateOne) Mutation() *TimesMutation {
	return tuo.mutation
}

// Where appends a list predicates to the TimesUpdate builder.
func (tuo *TimesUpdateOne) Where(ps ...predicate.Times) *TimesUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TimesUpdateOne) Select(field string, fields ...string) *TimesUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Times entity.
func (tuo *TimesUpdateOne) Save(ctx context.Context) (*Times, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TimesUpdateOne) SaveX(ctx context.Context) *Times {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TimesUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TimesUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TimesUpdateOne) sqlSave(ctx context.Context) (_node *Times, err error) {
	_spec := sqlgraph.NewUpdateSpec(times.Table, times.Columns, sqlgraph.NewFieldSpec(times.FieldID, field.TypeInt64))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Times.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, times.FieldID)
		for _, f := range fields {
			if !times.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != times.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.UserId(); ok {
		_spec.SetField(times.FieldUserId, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.AddedUserId(); ok {
		_spec.AddField(times.FieldUserId, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.TimeSpace(); ok {
		_spec.SetField(times.FieldTimeSpace, field.TypeString, value)
	}
	if value, ok := tuo.mutation.StartTime(); ok {
		_spec.SetField(times.FieldStartTime, field.TypeString, value)
	}
	_node = &Times{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{times.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
